import React, { useState, useEffect } from 'react';\nimport { CheckIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\nimport { modelsApi } from '../services/api';\nimport { ModelInfo } from '../types';\n\ninterface ModelSelectorProps {\n  selectedModel?: string;\n  onModelChange: (model: string) => void;\n  className?: string;\n}\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n  selectedModel,\n  onModelChange,\n  className = ''\n}) => {\n  const [models, setModels] = useState<ModelInfo[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadModels();\n  }, []);\n\n  const loadModels = async () => {\n    try {\n      setLoading(true);\n      const modelList = await modelsApi.getAvailableModels();\n      setModels(modelList);\n      \n      // 기본 모델이 설정되지 않았으면 기본값 설정\n      if (!selectedModel && modelList.length > 0) {\n        const defaultModel = modelList.find(m => m.is_default) || modelList[0];\n        onModelChange(defaultModel.id);\n      }\n    } catch (err: any) {\n      setError('모델 목록을 불러올 수 없습니다.');\n      console.error('Failed to load models:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectedModelInfo = models.find(m => m.id === selectedModel);\n\n  const getCostColor = (cost: string) => {\n    switch (cost) {\n      case '매우 낮음': return 'text-green-600';\n      case '낮음': return 'text-green-500';\n      case '보통': return 'text-yellow-500';\n      case '높음': return 'text-orange-500';\n      case '매우 높음': return 'text-red-500';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getSpeedColor = (speed: string) => {\n    switch (speed) {\n      case '매우 빠름': return 'text-green-600';\n      case '빠름': return 'text-green-500';\n      case '보통': return 'text-yellow-500';\n      case '느림': return 'text-orange-500';\n      default: return 'text-gray-600';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"animate-pulse bg-gray-200 rounded-lg h-12 w-full\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <div className=\"text-red-600 text-sm\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`}>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        GPT 모델 선택\n      </label>\n      \n      <div className=\"relative\">\n        <button\n          type=\"button\"\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"relative w-full bg-white border border-gray-300 rounded-lg shadow-sm px-4 py-3 text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              {selectedModelInfo ? (\n                <div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-medium text-gray-900\">\n                      {selectedModelInfo.name}\n                    </span>\n                    {selectedModelInfo.is_default && (\n                      <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                        기본값\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-4 mt-1 text-xs text-gray-500\">\n                    <span className={`font-medium ${getCostColor(selectedModelInfo.cost)}`}>\n                      비용: {selectedModelInfo.cost}\n                    </span>\n                    <span className={`font-medium ${getSpeedColor(selectedModelInfo.speed)}`}>\n                      속도: {selectedModelInfo.speed}\n                    </span>\n                  </div>\n                </div>\n              ) : (\n                <span className=\"text-gray-500\">모델을 선택하세요</span>\n              )}\n            </div>\n            <ChevronDownIcon \n              className={`w-5 h-5 text-gray-400 transition-transform duration-200 ${\n                isOpen ? 'transform rotate-180' : ''\n              }`} \n            />\n          </div>\n        </button>\n\n        {isOpen && (\n          <div className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-80 rounded-lg py-1 border border-gray-200 overflow-auto focus:outline-none\">\n            {models.map((model) => (\n              <div\n                key={model.id}\n                onClick={() => {\n                  onModelChange(model.id);\n                  setIsOpen(false);\n                }}\n                className=\"cursor-pointer select-none relative py-3 px-4 hover:bg-gray-50 transition-colors\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-medium text-gray-900\">\n                        {model.name}\n                      </span>\n                      {model.is_default && (\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800\">\n                          기본값\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {model.description}\n                    </p>\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                        <span className={`font-medium ${getCostColor(model.cost)}`}>\n                          비용: {model.cost}\n                        </span>\n                        <span className={`font-medium ${getSpeedColor(model.speed)}`}>\n                          속도: {model.speed}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {model.best_for.slice(0, 3).map((feature, index) => (\n                        <span \n                          key={index}\n                          className=\"inline-flex items-center px-2 py-0.5 rounded text-xs bg-gray-100 text-gray-700\"\n                        >\n                          {feature}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                  {selectedModel === model.id && (\n                    <CheckIcon className=\"w-5 h-5 text-blue-600\" />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {selectedModelInfo && (\n        <div className=\"mt-3 p-3 bg-gray-50 rounded-lg\">\n          <div className=\"text-xs text-gray-600\">\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <span className=\"font-medium\">입력:</span> {selectedModelInfo.pricing.input}\n              </div>\n              <div>\n                <span className=\"font-medium\">출력:</span> {selectedModelInfo.pricing.output}\n              </div>\n            </div>\n            <div className=\"mt-2\">\n              <span className=\"font-medium\">컨텍스트:</span> {selectedModelInfo.context_length.toLocaleString()} tokens\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelSelector;