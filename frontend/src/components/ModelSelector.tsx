import React, { useState, useEffect } from 'react';\nimport { ChevronDownIcon, CheckIcon, InformationCircleIcon } from '@heroicons/react/24/outline';\n\ninterface Model {\n  id: string;\n  name: string;\n  description: string;\n  use_cases: string[];\n  is_default: boolean;\n  capabilities: string[];\n  pricing_tier: string;\n  performance_tier: string;\n}\n\ninterface ModelSelectorProps {\n  selectedModel: string;\n  onModelChange: (modelId: string) => void;\n  className?: string;\n}\n\nconst ModelSelector: React.FC<ModelSelectorProps> = ({\n  selectedModel,\n  onModelChange,\n  className = ''\n}) => {\n  const [models, setModels] = useState<Model[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showDetails, setShowDetails] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchModels();\n  }, []);\n\n  const fetchModels = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/v1/models');\n      const data = await response.json();\n      \n      if (data.success) {\n        setModels(data.models);\n        // 기본 모델이 선택되지 않았으면 기본 모델로 설정\n        if (!selectedModel && data.default_model) {\n          onModelChange(data.default_model);\n        }\n      } else {\n        setError('모델 정보를 불러올 수 없습니다.');\n      }\n    } catch (err) {\n      setError('모델 정보를 불러오는 중 오류가 발생했습니다.');\n      console.error('모델 로딩 오류:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectedModelData = models.find(model => model.id === selectedModel);\n\n  const getPricingColor = (tier: string) => {\n    switch (tier) {\n      case 'premium': return 'text-red-600 bg-red-50';\n      case 'standard': return 'text-yellow-600 bg-yellow-50';\n      case 'economy': return 'text-green-600 bg-green-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getPerformanceColor = (tier: string) => {\n    switch (tier) {\n      case '최고': return 'text-purple-600 bg-purple-50';\n      case '높음': return 'text-blue-600 bg-blue-50';\n      case '중간': return 'text-yellow-600 bg-yellow-50';\n      case '기본': return 'text-gray-600 bg-gray-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`${className}`}>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          GPT 모델 선택\n        </label>\n        <div className=\"animate-pulse bg-gray-200 h-10 rounded-md\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          GPT 모델 선택\n        </label>\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-3 text-red-700 text-sm\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative ${className}`}>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        GPT 모델 선택\n      </label>\n      \n      {/* 드롭다운 버튼 */}\n      <button\n        type=\"button\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative w-full bg-white border border-gray-300 rounded-md pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n      >\n        <span className=\"flex items-center\">\n          <span className=\"block truncate\">\n            {selectedModelData ? (\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium\">{selectedModelData.name}</span>\n                <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${\n                  getPricingColor(selectedModelData.pricing_tier)\n                }`}>\n                  {selectedModelData.pricing_tier}\n                </span>\n                <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${\n                  getPerformanceColor(selectedModelData.performance_tier)\n                }`}>\n                  {selectedModelData.performance_tier}\n                </span>\n              </div>\n            ) : (\n              '모델을 선택하세요'\n            )}\n          </span>\n        </span>\n        <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\n          <ChevronDownIcon className=\"h-5 w-5 text-gray-400\" aria-hidden=\"true\" />\n        </span>\n      </button>\n\n      {/* 드롭다운 메뉴 */}\n      {isOpen && (\n        <div className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-96 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\">\n          {models.map((model) => (\n            <div key={model.id}>\n              <div\n                onClick={() => {\n                  onModelChange(model.id);\n                  setIsOpen(false);\n                  setShowDetails(null);\n                }}\n                className={`${\n                  selectedModel === model.id\n                    ? 'text-blue-900 bg-blue-50'\n                    : 'text-gray-900'\n                } cursor-default select-none relative py-2 pl-3 pr-9 hover:bg-gray-50`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`${\n                        selectedModel === model.id ? 'font-semibold' : 'font-normal'\n                      } block truncate`}>\n                        {model.name}\n                      </span>\n                      {model.is_default && (\n                        <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\n                          기본\n                        </span>\n                      )}\n                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${\n                        getPricingColor(model.pricing_tier)\n                      }`}>\n                        {model.pricing_tier}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      {model.description}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetails(showDetails === model.id ? null : model.id);\n                      }}\n                      className=\"text-gray-400 hover:text-gray-600\"\n                    >\n                      <InformationCircleIcon className=\"h-4 w-4\" />\n                    </button>\n                    \n                    {selectedModel === model.id && (\n                      <CheckIcon className=\"h-5 w-5 text-blue-600\" aria-hidden=\"true\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* 상세 정보 */}\n              {showDetails === model.id && (\n                <div className=\"bg-gray-50 px-3 py-2 border-t border-gray-200\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">주요 기능</h4>\n                      <ul className=\"text-gray-600 space-y-0.5\">\n                        {model.capabilities.map((capability, index) => (\n                          <li key={index}>• {capability}</li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 mb-1\">추천 사용 케이스</h4>\n                      <ul className=\"text-gray-600 space-y-0.5\">\n                        {model.use_cases.map((useCase, index) => (\n                          <li key={index}>• {useCase}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {/* 선택된 모델 정보 */}\n      {selectedModelData && (\n        <div className=\"mt-2 p-3 bg-blue-50 rounded-md\">\n          <div className=\"text-sm text-blue-800\">\n            <strong>선택된 모델:</strong> {selectedModelData.description}\n          </div>\n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {selectedModelData.use_cases.map((useCase, index) => (\n              <span\n                key={index}\n                className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\"\n              >\n                {useCase}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* 외부 클릭 시 드롭다운 닫기 */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-0\"\n          onClick={() => {\n            setIsOpen(false);\n            setShowDetails(null);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ModelSelector;\n